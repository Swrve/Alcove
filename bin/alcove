#!/usr/bin/ruby
$:.unshift File.expand_path('../../lib', __FILE__)
require 'alcove'
require 'alcove/version'
require 'ostruct'
require 'optparse'

options = OpenStruct.new
OptionParser.new do |opts|
  opts.banner = "Usage: alcove --product-name <product-name> [options]"

  opts.on("-h", "--help", "Displays the help screen") do
    puts opts
    exit
  end

  options.output_directory = "alcove-report"
  opts.on("-o", "--output-directory DIR", "Place report in DIR instead of default") do |o|
    options.output_directory = o
  end

  options.product_name = ""
  opts.on("-p", "--product-name NAME", "The name of your product") do |p|
    options.product_name = p
  end

  options.remove_filter = []
  opts.on("-r", "--remove-filter X,Y,Z...", ::Array, "A list of filters (e.g. *.h,main.m)") do |r|
    options.remove_filter = r
  end

  opts.on("-s", "--search-directory DIR", "Search in DIR for coverage files") do |s|
    options.search_directory = s
  end

  options.verbose = false
  opts.on("-v", "--verbose", "Output additional information") do
    options.verbose = true
  end

  opts.on_tail("--version", "Show version") do
    puts Alcove::VERSION
    exit
  end

  begin
    opts.parse!(ARGV)
    if options.product_name.length == 0
      STDERR.puts "--product-name is required".yellow
      puts opts
      exit(1)
    end
  rescue OptionParser::InvalidOption => e
    puts e
    puts opts
    exit(1)
  end
end

def exit_with_code(code)
  FileUtils.rm_rf(Alcove::TEMP_DIR)
  exit(code)
end

alcoveOptions = OpenStruct.new
alcoveOptions.verbose = options.verbose

alcove = Alcove.new(alcoveOptions)
puts " üîç  Generating report..."

FileUtils.rm_rf(Alcove::TEMP_DIR)
FileUtils.mkdir(Alcove::TEMP_DIR)

if options.search_directory
  search_directory = options.search_directory
else
  search_directory = alcove.get_search_directory
end
alcove.copy_input_files_to_temp(search_directory, options.product_name)

gi_filename_absolute = File.join(Alcove::TEMP_DIR, "alcove-info.temp")
gen_success = alcove.gen_info_files(gi_filename_absolute)
if gen_success
  puts " ‚úÖ  geninfo successful".green if options.verbose
else
  STDERR.puts " üö´  geninfo failed!".red
  exit_with_code(1)
end

lcov_filename_absolute = File.join(Alcove::TEMP_DIR, "alcove-lcov.info")
lcov_success = alcove.lcov(gi_filename_absolute, options.remove_filter, lcov_filename_absolute)
if lcov_success
  puts " ‚úÖ  lcov successful".green if options.verbose
else
  STDERR.puts " üö´  lcov failed!".red
  exit_with_code(1)
end

genhtml_success = alcove.genhtml(lcov_filename_absolute, options.output_directory)
if genhtml_success
  puts "" if options.verbose
  puts " ‚úÖ  Successfully generated report".green
  puts " üçª  Open #{options.output_directory}/index.html to view the report"
else
  STDERR.puts " üö´  genhtml failed!".red
  exit_with_code(1)
end

exit_with_code(0)
